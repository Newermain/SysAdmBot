import logging
import re
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
)
from aiogram.utils.markdown import text
from aiogram.enums import ParseMode 
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "7183399679:AAHKKtnKMFzuQX_R67_TzVkhwhrAobFiGDo"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_CHAT_ID = " -1002595180902"  # –¢–æ–∫–µ–Ω —á–∞—Ç–∞
DATABASE_NAME = "requests.db"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
departments = ["IT", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "HR", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–¥–∞–∂–∏", "–î—Ä—É–≥–æ–µ"]

def get_departments_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for dept in departments:
        keyboard.add(KeyboardButton(text=dept))
    return keyboard

def get_admin_keyboard(request_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_working_{request_id}")],
        [InlineKeyboardButton(text="‚úîÔ∏è –†–µ—à–µ–Ω–æ", callback_data=f"status_done_{request_id}")],
    ])
    return keyboard

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM (Finite State Machine) ---
class RequestForm(StatesGroup):
    department = State()
    full_name = State()
    problem = State()
    photo = State()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        full_name TEXT,
        department TEXT,
        problem TEXT,
        photo_id TEXT,
        status TEXT DEFAULT 'new',
        created_at TEXT
    )
    """)
    conn.commit()
    conn.close()

init_db()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")]
    ])
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ IT-–ø—Ä–æ–±–ª–µ–º—ã.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "create_request")
async def start_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:",
        reply_markup=get_departments_keyboard()
    )
    await state.set_state(RequestForm.department)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ (FSM) ---
@dp.message(RequestForm.department)
async def process_department(message: types.Message, state: FSMContext):
    await state.update_data(department=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(RequestForm.full_name)

@dp.message(RequestForm.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if not re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$", message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return
    await state.update_data(full_name=message.text)
    await message.answer("üîß –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(RequestForm.problem)

@dp.message(RequestForm.problem)
async def process_problem(message: types.Message, state: FSMContext):
    await state.update_data(problem=message.text)
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ). –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip.")
    await state.set_state(RequestForm.photo)

@dp.message(RequestForm.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await finish_request(message, state)

@dp.message(RequestForm.photo, Command("skip"))
async def skip_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=None)
    await finish_request(message, state)

async def finish_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO requests (user_id, username, full_name, department, problem, photo_id, created_at) "
        "VALUES (?, ?, ?, ?, ?, ?, ?)",
        (
            message.from_user.id,
            message.from_user.username,
            data["full_name"],
            data["department"],
            data["problem"],
            data.get("photo_id"),
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        )
    )
    request_id = cursor.lastrowid
    conn.commit()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_text = (
        f"üö® **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}**\n"
        f"üë§ **–§–ò–û:** {data['full_name']}\n"
        f"üè¢ **–û—Ç–¥–µ–ª:** {data['department']}\n"
        f"üìù **–ü—Ä–æ–±–ª–µ–º–∞:** {data['problem']}\n"
        f"üïí **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    if data.get("photo_id"):
        await bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=data["photo_id"],
            caption=admin_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_admin_keyboard(request_id)
        )
    else:
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_admin_keyboard(request_id)
        )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ **–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.**\n"
        "–ú—ã —Å–∫–æ—Ä–æ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞–µ–º!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (–∞–¥–º–∏–Ω) ---
@dp.callback_query(lambda c: c.data.startswith("status_"))
async def update_status(callback: types.CallbackQuery):
    _, action, request_id = callback.data.split("_")
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    if action == "working":
        new_status = "working"
        status_text = "‚è≥ –í —Ä–∞–±–æ—Ç–µ"
    elif action == "done":
        new_status = "done"
        status_text = "‚úÖ –†–µ—à–µ–Ω–æ"
    
    cursor.execute(
        "UPDATE requests SET status = ? WHERE id = ?",
        (new_status, request_id)
    )
    conn.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_caption(
        caption=f"{callback.message.caption}\n\n**–°—Ç–∞—Ç—É—Å:** {status_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω!")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())