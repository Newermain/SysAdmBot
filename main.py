import logging
import re
import sqlite3
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
    ReplyKeyboardRemove
)
from aiogram.utils.markdown import text
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "7183399679:AAHKKtnKMFzuQX_R67_TzVkhwhrAobFiGDo"
ADMIN_CHAT_ID = -1002595180902  
DATABASE_NAME = "requests.db"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
storage = MemoryStorage()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
departments = ["IT", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "HR", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–¥–∞–∂–∏", "–î—Ä—É–≥–æ–µ"]

def get_departments_keyboard():
    # –í aiogram 3.x –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ keyboard
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=dept)] for dept in departments
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_admin_keyboard(request_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_working_{request_id}")],
            [InlineKeyboardButton(text="‚úîÔ∏è –†–µ—à–µ–Ω–æ", callback_data=f"status_done_{request_id}")],
        ]
    )

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class RequestForm(StatesGroup):
    department = State()
    full_name = State()
    problem = State()
    photo = State()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    with sqlite3.connect(DATABASE_NAME) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            full_name TEXT,
            department TEXT,
            problem TEXT,
            photo_id TEXT,
            status TEXT DEFAULT 'new',
            created_at TEXT
        )
        """)

init_db()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ IT-–ø—Ä–æ–±–ª–µ–º—ã.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")
            ]]
        )
    )

@dp.callback_query(F.data == "create_request")
async def start_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:",
        reply_markup=get_departments_keyboard()
    )
    await state.set_state(RequestForm.department)

@dp.message(RequestForm.department)
async def process_department(message: types.Message, state: FSMContext):
    await state.update_data(department=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RequestForm.full_name)

@dp.message(RequestForm.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if not re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$", message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return
    await state.update_data(full_name=message.text)
    await message.answer("üîß –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(RequestForm.problem)

@dp.message(RequestForm.problem)
async def process_problem(message: types.Message, state: FSMContext):
    await state.update_data(problem=message.text)
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ). –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip.")
    await state.set_state(RequestForm.photo)

@dp.message(RequestForm.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await finish_request(message, state)

@dp.message(RequestForm.photo, Command("skip"))
async def skip_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=None)
    await finish_request(message, state)

async def finish_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    with sqlite3.connect(DATABASE_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO requests VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?)",
            (
                message.from_user.id,
                message.from_user.username,
                data["full_name"],
                data["department"],
                data["problem"],
                data.get("photo_id"),
                "new",
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            )
        )
        request_id = cursor.lastrowid
    
    admin_text = (
        f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üè¢ –û—Ç–¥–µ–ª: {data['department']}\n"
        f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n"
        f"üïí –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    if data.get("photo_id"):
        await bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=data["photo_id"],
            caption=admin_text,
            reply_markup=get_admin_keyboard(request_id)
        )
    else:
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_text,
            reply_markup=get_admin_keyboard(request_id)
        )
    
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.\n–ú—ã —Å–∫–æ—Ä–æ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞–µ–º!",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

@dp.callback_query(F.data.startswith("status_"))
async def update_status(callback: types.CallbackQuery):
    _, action, request_id = callback.data.split("_")
    
    with sqlite3.connect(DATABASE_NAME) as conn:
        status = "working" if action == "working" else "done"
        conn.execute(
            "UPDATE requests SET status = ? WHERE id = ?",
            (status, request_id)
        )
    
    status_text = "‚è≥ –í —Ä–∞–±–æ—Ç–µ" if action == "working" else "‚úÖ –†–µ—à–µ–Ω–æ"
    
    if callback.message.caption:
        await callback.message.edit_caption(
            caption=f"{callback.message.caption}\n\n–°—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=get_admin_keyboard(request_id)
        )
    else:
        await callback.message.edit_text(
            text=f"{callback.message.text}\n\n–°—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=get_admin_keyboard(request_id)
        )
    
    await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())