import logging
import re
import aiosqlite
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "7183399679:AAHKKtnKMFzuQX_R67_TzVkhwhrAobFiGDo"
ADMIN_CHAT_ID = -1002595180902
DATABASE_NAME = "requests.db"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
departments = ["IT", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "HR", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–¥–∞–∂–∏", "–î—Ä—É–≥–æ–µ"]

def get_departments_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=dept)] for dept in departments
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_admin_keyboard(request_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_working_{request_id}")],
            [InlineKeyboardButton(text="‚úîÔ∏è –†–µ—à–µ–Ω–æ", callback_data=f"status_done_{request_id}")]
        ]
    )

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class RequestForm(StatesGroup):
    department = State()
    full_name = State()
    problem = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute("DROP TABLE IF EXISTS requests")  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        await db.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            full_name TEXT,
            department TEXT,
            problem TEXT,
            status TEXT DEFAULT 'new',
            created_at TEXT,
            admin_message_id INTEGER
        )
        """)
        await db.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ IT-–ø—Ä–æ–±–ª–µ–º—ã.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")
            ]]
        )
    )

@dp.callback_query(F.data == "create_request")
async def start_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:",
        reply_markup=get_departments_keyboard()
    )
    await state.set_state(RequestForm.department)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ ---
@dp.message(RequestForm.department)
async def process_department(message: types.Message, state: FSMContext):
    await state.update_data(department=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RequestForm.full_name)

@dp.message(RequestForm.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if not re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$", message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        return
    await state.update_data(full_name=message.text)
    await message.answer("üîß –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(RequestForm.problem)

@dp.message(RequestForm.problem)
async def process_problem(message: types.Message, state: FSMContext):
    await state.update_data(problem=message.text)
    await finish_request(message, state)

async def finish_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            cursor = await db.execute(
                "INSERT INTO requests (user_id, username, full_name, department, problem, status, created_at) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (
                    message.from_user.id,
                    message.from_user.username,
                    data["full_name"],
                    data["department"],
                    data["problem"],
                    "new",
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                )
            )
            request_id = cursor.lastrowid
            await db.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        request_text = (
            f"üö® –ó–∞—è–≤–∫–∞ #{request_id}\n"
            f"üë§ –§–ò–û: {data['full_name']}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {data['department']}\n"
            f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n"
            f"üïí –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üÜï –°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
        admin_msg = await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=request_text,
            reply_markup=get_admin_keyboard(request_id)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        async with aiosqlite.connect(DATABASE_NAME) as db:
            await db.execute(
                "UPDATE requests SET admin_message_id = ? WHERE id = ?",
                (admin_msg.message_id, request_id)
            )
            await db.commit()

        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.\n–ú—ã —Å–∫–æ—Ä–æ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞–µ–º!",
            reply_markup=ReplyKeyboardRemove()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    finally:
        await state.clear()

@dp.callback_query(F.data.startswith("status_"))
async def update_status(callback: types.CallbackQuery):
    try:
        _, action, request_id = callback.data.split("_")
        new_status = "working" if action == "working" else "done"
        status_text = "üîÑ –í —Ä–∞–±–æ—Ç–µ" if action == "working" else "‚úÖ –†–µ—à–µ–Ω–æ"

        async with aiosqlite.connect(DATABASE_NAME) as db:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            await db.execute(
                "UPDATE requests SET status = ? WHERE id = ?",
                (new_status, request_id)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            cursor = await db.execute(
                "SELECT full_name, department, problem, admin_message_id FROM requests WHERE id = ?",
                (request_id,)
            )
            full_name, department, problem, admin_message_id = await cursor.fetchone()
            await db.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        updated_text = (
            f"üö® –ó–∞—è–≤–∫–∞ #{request_id}\n"
            f"üë§ –§–ò–û: {full_name}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {department}\n"
            f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {problem}\n"
            f"üïí –°—Ç–∞—Ç—É—Å: {status_text}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=ADMIN_CHAT_ID,
            message_id=admin_message_id,
            text=updated_text,
            reply_markup=get_admin_keyboard(request_id)
        )

        await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())