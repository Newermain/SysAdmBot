import logging
import re
import aiosqlite
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InputMediaPhoto
)
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph
from io import BytesIO
from reportlab.lib.enums import TA_JUSTIFY
from reportlab.platypus import SimpleDocTemplate, Spacer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8125237649:AAHiHUVctjsSamLG7V_AH5TBbkofDLe8p3w"
ADMIN_CHAT_ID = -1002595180902
ADMIN_ID = 814124459
DATABASE_NAME = "requests.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
departments = ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ-—É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "–ü—Ä–æ–¥–∞–∂–∏", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–õ–æ–≥–∏—Å—Ç–∏–∫–∞/–°–Ω–∞–±–∂–µ–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–¢–µ—Ö –ö–æ–Ω—Ç—Ä–æ–ª—å", "–ò–Ω–∂–µ–Ω–µ—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞", "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞", "–ü–ª–∞–Ω–æ–≤–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π", "–ü–∏—Ç–µ—Ä", "–ü–∞—Ä–∏—Ñ–∞—Ä–º", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∫–∞", "–°–∫–ª–∞–¥"]

request_types = ["üö® –ü—Ä–æ–±–ª–µ–º–∞ (—á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å)", "üõí –ó–∞–∫—É–ø–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"]

def get_request_types_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=req_type)] for req_type in request_types
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_departments_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=dept)] for dept in departments
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_photo_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω")],
            [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_admin_keyboard(request_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_working_{request_id}")],
            [InlineKeyboardButton(text="‚úîÔ∏è –†–µ—à–µ–Ω–æ", callback_data=f"status_done_{request_id}")]
        ]
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RequestForm(StatesGroup):
    request_type = State()
    department = State()
    full_name = State()
    problem = State()
    photo = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            full_name TEXT NOT NULL,
            department TEXT NOT NULL,
            request_type TEXT NOT NULL,
            problem TEXT NOT NULL,
            photo_id TEXT,
            status TEXT DEFAULT 'new',
            created_at TEXT NOT NULL,
            admin_message_id INTEGER
        )
        """)
        await db.commit()
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
@dp.message(Command("my_requests"))
async def show_my_requests(message: types.Message):
    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            cursor = await db.execute(
                """SELECT id, problem, status, created_at, request_type 
                FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC""",
                (message.from_user.id,)
            )
            requests = await cursor.fetchall()

        if not requests:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
            return

        response = ["üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:"]
        status_icons = {"–ù–æ–≤–∞—è": "üÜï", "–í —Ä–∞–±–æ—Ç–µ": "üîÑ", "–†–µ—à–µ–Ω–∞": "‚úîÔ∏è"}
        
        for req_id, problem, status, created_at, req_type in requests:
            date = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")
            response.append(
                f"\n{status_icons.get(status, '‚ùì')} {req_type} #{req_id}\n"
                f"üìÖ {date} | –°—Ç–∞—Ç—É—Å: {status.capitalize()}\n"
                f"üìù {problem[:50]}{'...' if len(problem) > 50 else ''}"
            )

        await message.answer("\n".join(response))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ IT-–ø—Ä–æ–±–ª–µ–º—ã.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create_request - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
        "/my_requests - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")
            ]]
        )
    )

@dp.callback_query(F.data == "create_request")
async def start_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
        reply_markup=get_request_types_keyboard()
    )
    await state.set_state(RequestForm.request_type)

@dp.message(Command("create_request"))
async def cmd_create_request(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
        reply_markup=get_request_types_keyboard()
    )
    await state.set_state(RequestForm.request_type)

@dp.message(Command("generate_reports"))
async def generate_reports(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    date_format = "%Y-%m-%d"  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—Å–µ –∑–∞–ø–∏—Å–∏)
    start_date = "1970-01-01"
    end_date = "2099-12-31"

    # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if len(args) >= 2:
        try:
            start_date = args[0]
            end_date = args[1]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
            datetime.strptime(start_date, date_format)
            datetime.strptime(end_date, date_format)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π
            if start_date > end_date:
                await message.answer("‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π")
                return
                
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /generate_reports [YYYY-MM-DD] [YYYY-MM-DD]")
            return

    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ
        async with aiosqlite.connect(DATABASE_NAME) as db:
            cursor = await db.execute(
                """SELECT id, created_at, full_name, problem, status 
                FROM requests 
                WHERE request_type = ? 
                AND date(created_at) BETWEEN date(?) AND date(?)
                ORDER BY created_at""",
                ("üö® –ü—Ä–æ–±–ª–µ–º–∞ (—á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å)", start_date, end_date)
            )
            problems = await cursor.fetchall()

            cursor = await db.execute(
                """SELECT id, created_at, full_name, problem, status 
                FROM requests 
                WHERE request_type = ? 
                AND date(created_at) BETWEEN date(?) AND date(?)
                ORDER BY created_at""",
                ("üõí –ó–∞–∫—É–ø–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", start_date, end_date)
            )
            purchases = await cursor.fetchall()

        # 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
        try:
            pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))
            pdfmetrics.registerFont(TTFont('DejaVu-Bold', 'DejaVuSans-Bold.ttf'))
            main_font = 'DejaVu'
        except:
            main_font = 'Helvetica'
            await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")

        # 3. –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
        styles = getSampleStyleSheet()
        style_normal = styles["BodyText"]
        style_normal.fontName = main_font
        style_normal.fontSize = 8
        style_normal.leading = 10
        style_normal.alignment = TA_JUSTIFY

        # 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF
        def create_pdf(data, title):
            buffer = BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4)
            width, height = A4
            
            # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            style_title = styles["Title"]
            style_title.fontName = f"{main_font}-Bold" if f"{main_font}-Bold" in pdfmetrics.getRegisteredFontNames() else main_font
            style_title.fontSize = 16
            style_title.leading = 18
            style_title.spaceAfter = 12
    
            # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
            style_subtitle = styles["BodyText"]
            style_subtitle.fontName = main_font
            style_subtitle.fontSize = 12
            style_subtitle.leading = 14
    
            elements = []
    
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–∞
            elements.append(Paragraph(f"<font name='{main_font}'><b>{title}</b></font>", style_title))
    
            # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
            elements.append(Paragraph(
                f"<font name='{main_font}'>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}</font>",
                style_subtitle
            ))
    
            elements.append(Spacer(1, 12))
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
            table_data = [
                [
                    Paragraph("<b>‚Ññ</b>", style_normal),
                    Paragraph("<b>–î–∞—Ç–∞</b>", style_normal),
                    Paragraph("<b>–ó–∞—è–≤–∏—Ç–µ–ª—å</b>", style_normal),
                    Paragraph("<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>", style_normal),
                    Paragraph("<b>–°—Ç–∞—Ç—É—Å</b>", style_normal)
                ]
            ]
            
            for row in data:
                date = datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")
                table_data.append([
                    Paragraph(str(row[0]), style_normal),
                    Paragraph(date, style_normal),
                    Paragraph(row[2], style_normal),
                    Paragraph(row[3], style_normal),
                    Paragraph(row[4], style_normal)
                ])
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            table = Table(table_data, colWidths=[30, 60, 120, None, 60])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('WORDWRAP', (0, 0), (-1, -1), True),
            ]))
            
            elements.append(table)
            doc.build(elements)
            buffer.seek(0)
            return buffer

        # 5. –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã
        await message.answer(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}")

        problems_pdf = create_pdf(problems, f"–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º ({start_date} - {end_date})")
        await bot.send_document(
            chat_id=message.from_user.id,
            document=types.BufferedInputFile(
                problems_pdf.getvalue(),
                filename=f"problems_report_{start_date}_{end_date}.pdf"
            ),
            caption=f"–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º –∑–∞ {start_date} - {end_date}"
        )

        purchases_pdf = create_pdf(purchases, f"–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º ({start_date} - {end_date})")
        await bot.send_document(
            chat_id=message.from_user.id,
            document=types.BufferedInputFile(
                purchases_pdf.getvalue(),
                filename=f"purchases_report_{start_date}_{end_date}.pdf"
            ),
            caption=f"–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º –∑–∞ {start_date} - {end_date}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
@dp.message(RequestForm.request_type)
async def process_request_type(message: types.Message, state: FSMContext):
    if message.text not in request_types:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    await state.update_data(request_type=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:",
        reply_markup=get_departments_keyboard()
    )
    await state.set_state(RequestForm.department)

@dp.message(RequestForm.department)
async def process_department(message: types.Message, state: FSMContext):
    if message.text not in departments:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
        
    await state.update_data(department=message.text)
    await message.answer(
    "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    "<b>–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ</b>\n\n"
    "–ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>",
    reply_markup=ReplyKeyboardRemove(),
    parse_mode=ParseMode.HTML
)
    await state.set_state(RequestForm.full_name)

@dp.message(RequestForm.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –§–ò–û
    if not re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$", message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
            "<b>–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data({
        'full_name': message.text.strip()
    })
    data = await state.get_data()
    if "üö® –ü—Ä–æ–±–ª–µ–º–∞" in data["request_type"]:
        prompt = "üîß –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:"
    else:
        prompt = "üõí –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—É–ø–∏—Ç—å:"
    
    await message.answer(prompt)
    await state.set_state(RequestForm.problem)
    
@dp.message(RequestForm.problem)
async def process_problem(message: types.Message, state: FSMContext):
    await state.update_data(problem=message.text)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω –∫ –∑–∞—è–≤–∫–µ?",
        reply_markup=get_photo_keyboard()
    )
    await state.set_state(RequestForm.photo)

@dp.message(RequestForm.photo, F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=None)
    await finish_request(message, state)

@dp.message(RequestForm.photo, F.text == "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω")
async def request_photo(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=ReplyKeyboardRemove())

@dp.message(RequestForm.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    await state.update_data(photo=photo_id)
    await finish_request(message, state)

@dp.message(RequestForm.photo)
async def wrong_photo_input(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

async def finish_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
            cursor = await db.execute(
                """INSERT INTO requests 
                (user_id, username, full_name, department, request_type, problem, photo_id, status, created_at) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (
                    message.from_user.id,
                    message.from_user.username,
                    data["full_name"],
                    data["department"],
                    data["request_type"],
                    data["problem"],
                    data.get("photo"),
                    "new",
                    created_at
                )
            )
            request_id = cursor.lastrowid
            await db.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        request_text = (
            f"{data['request_type']} #{request_id}\n"
            f"üë§ –§–ò–û: {data['full_name']}\n"
            f"üîó –õ–æ–≥–∏–Ω: @{data.get('username', message.from_user.username)}\n"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            f"üè¢ –û—Ç–¥–µ–ª: {data['department']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['problem']}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üÜï –°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
        if data.get("photo"):
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
            media = InputMediaPhoto(
                media=data["photo"],
                caption=request_text
            )
            sent_message = await bot.send_media_group(
                chat_id=ADMIN_CHAT_ID,
                media=[media]
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            admin_message = await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:",
                reply_markup=get_admin_keyboard(request_id)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
            admin_message_id = admin_message.message_id
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            sent_message = await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=request_text,
                reply_markup=get_admin_keyboard(request_id)
            )
            admin_message_id = sent_message.message_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(DATABASE_NAME) as db:
            await db.execute(
                "UPDATE requests SET admin_message_id = ? WHERE id = ?",
                (admin_message_id, request_id)
            )
            await db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_message = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üè∑Ô∏è –¢–∏–ø: {data['request_type']}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {data['department']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['problem']}\n"
        )
        
        if data.get("photo"):
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=data["photo"],
                caption=user_message + "\nüì∑ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ"
            )
        else:
            await message.answer(user_message)
        
        await message.answer(
            f"üïí –°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ /my_requests",
            reply_markup=ReplyKeyboardRemove()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    finally:
        await state.clear()

@dp.callback_query(F.data.startswith("status_"))
async def update_status(callback: types.CallbackQuery):
    try:
        _, action, request_id = callback.data.split("_")
        request_id = int(request_id)
        new_status = "working" if action == "working" else "done"
        status_text = "üîÑ –í —Ä–∞–±–æ—Ç–µ" if action == "working" else "‚úÖ –†–µ—à–µ–Ω–æ"

        async with aiosqlite.connect(DATABASE_NAME) as db:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            cursor = await db.execute(
                """SELECT user_id, full_name, department, problem, request_type, photo_id, admin_message_id 
                FROM requests WHERE id = ?""",
                (request_id,)
            )
            request_data = await cursor.fetchone()
            
            if not request_data:
                await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            user_id, full_name, department, problem, req_type, photo_id, admin_message_id = request_data

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.execute(
                "UPDATE requests SET status = ? WHERE id = ?",
                (new_status, request_id)
            )
            await db.commit()

        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"{req_type} #{request_id}\n"
            f"üë§ –§–ò–û: {full_name}\n"
            f"üîó –õ–æ–≥–∏–Ω: @{callback.from_user.username}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            f"üè¢ –û—Ç–¥–µ–ª: {department}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {problem}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üïí –°—Ç–∞—Ç—É—Å: {status_text}"
        )
        
        try:
            if photo_id:
                # –ï—Å–ª–∏ –±—ã–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ,
                # –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=admin_message,
                    reply_markup=get_admin_keyboard(request_id)
                )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.edit_message_text(
                    chat_id=ADMIN_CHAT_ID,
                    message_id=admin_message_id,
                    text=admin_message,
                    reply_markup=get_admin_keyboard(request_id)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_notification = (
            f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #{request_id} –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
            f"üè∑Ô∏è –¢–∏–ø: {req_type}\n"
            f"üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {problem[:100]}{'...' if len(problem) > 100 else ''}"
        )
        
        try:
            if photo_id:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo_id,
                    caption=user_notification
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=user_notification
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

        await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status_text}")

    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())